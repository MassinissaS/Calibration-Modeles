import numpy as np
import matplotlib.pyplot as plt
import math


def repartition(x):
    f = 1 / 2 * (1 + math.erf(x / math.sqrt(2)))
    return f


def d1(t, S, K, T, r, sigma):
    f = (math.log(S / K) + (r + sigma ** 2 / 2) * (T - t)) / (sigma * math.sqrt(T - t))
    return f


def d2(t, S, K, T, r, sigma):
    f = (math.log(S / K) + (r - sigma ** 2 / 2) * (T - t)) / (sigma * math.sqrt(T - t))
    return f


def call_black_scholes(t, S, K, T, r, sigma):
    if t == T:
        f = max(S - K, 0)
    else:
        f = S * repartition(d1(t, S, K, T, r, sigma)) - K * math.exp(-r * (T - t)) * repartition(d2(t, S, K, T, r, sigma))
    return f


def vega_black_scholes(t, S, K, T, r, sigma):
    f = (S * math.sqrt(T - t) * math.exp(-(d1(t, S, K, T, r, sigma)) ** 2 / 2)) / math.sqrt(2 * np.pi)
    return f

def F_call(marche, t, S, K, T, r, sigma):
    f = call_black_scholes(t, S, K, T, r, sigma) - marche
    return f


S = []
Call_test = []
vega_test = []


for i in range(1, 101):
    S.append(0.2 * i)
    Call_test.append(call_black_scholes(0, S[i - 1], 10, 1, 0.1, 0.5))
    vega_test.append(vega_black_scholes(0, S[i - 1], 10, 1, 0.1, 0.5))


t, r, epsilon, T, S0 = 0, 0.05, 0.0001, 1 / 3, 5430.3
K = [5125, 5225, 5325, 5425, 5525, 5625, 5725, 5825]
M = [475, 405, 340, 280.5, 226, 179.5, 139, 105]

sigma=(math.sqrt(2*np.abs((math.log(S0/K[0])+r*T)/T))) # Point de départ tel que défini par l'énoncé
volatilite_implicite=np.zeros(8)


for i in range(0, 8):
    # Vérifions que le prix tombe bien dans l'intervalle défini par les contraintes d'arbitrages
    if M[i] < S0 and M[i] >= max(S0 - K[i] * math.exp(-r * T), 0):
        while (np.abs(F_call(M[i], t, S0, K[i], T, r, sigma)) > epsilon):
            # Selon la récurrence de l'algorithme de Newton
            sigma = sigma - F_call(M[i], t, S0, K[i], T, r, sigma) / vega_black_scholes(t, S0, K[i], T, r, sigma)
            volatilite_implicite[i] = (sigma)
    else:
        volatilite_implicite[i] = (0)


fig, ax = plt.subplots()
ax.plot(K, volatilite_implicite)
plt.title('Volatilite implicite en fonction du strike')
plt.xlabel('Strike (en $)')
plt.ylabel('Volatilite Implicite (en % par an)')
plt.show()

#fig, ax = plt.subplots()
#ax.plot(S, Call_test)
#plt.xlabel('XXX')
#plt.ylabel('YYY')
#plt.title('Call')
#plt.show()

#fig, ax = plt.subplots()
#ax.plot(S, vega_test)
#plt.xlabel('XXX')
#plt.ylabel('YYY')
#plt.title('Vega')
#plt.show()
